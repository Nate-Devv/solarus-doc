/**
\page lua_api_shop_treasure Shop treasure

\tableofcontents

A shop treasure is a treasure that can be purchased by the
\ref lua_api_hero "hero" for money.

This type of \ref lua_api_entity "map entity" can be declared in the
\ref lua_api_map_overview_files "map data file".
It can also be created dynamically with
\ref lua_api_map_create_shop_treasure "map:create_shop_treasure()".

\section lua_api_shop_treasure_overview Overview

A shop treasure entity shows the \ref lua_api_sprite "sprite"
of the treasure and its price.
Its size is always 32x32 pixels and other entities cannot traverse it.

The \ref lua_api_hero "hero" can interact with this a shop treasure to buy it.
A dialog is then automatically shown and the player can choose to buy the
item or not.
If he buys the treasure, he obtains it and brandishes it
(just like when opening a \ref lua_api_chest "chest").
If the treasure is saved, it disappears from the \ref lua_api_map "map",
otherwise it stays and can be bought again.

Shop treasures allow to make shops very easily from the quest editor.
They provide a built-in process that handles entirely the dialogs, the price
and the treasure.
This API does not provide much control on this process.
If you need to implement more customized interactions, you can use a
\ref lua_api_npc "generalized NPC".

\section lua_api_shop_treasure_dialogs Dialogs of shop treasures

Dialogs of shop treasures need special care because everything is built-in with
shop treasures, but dialogs are entirely customizable.
You can skip this section if you are not making your own dialog box system. 

Dialogs that are displayed when interacting with a shop treasure are quite
elaborate because they have both a parameter (the price: a number) and a result
(the decision of the player: a boolean).
If you implement your own dialog box in Lua, which is recommended,
you need to respect the mechanism
described in this section for the particular dialog of shop treasures.

First, when the hero interacts with a shop treasure,
a dialog shows the description of the treasure.
There is nothing special about this dialog.

Then, a second dialog shows the price of the treasure
and asks if the player wants to buy it.
The player can accept or refuse.
This second dialog has the id \c "_shop.question".

Since the price of the treasure is only known at runtime
(\ref quest_language_dialogs "dialogs.dat" cannot know it),
you should put a special sequence in the text of the dialog instead
(like \c "$v"), and replace this special sequence
by the actual price at runtime.
At runtime, the price is the \c info argument of the
\ref lua_api_game_on_dialog_started "game:on_dialog_started()" event,
so you can perform the substitution there.

Furthermore, when the dialog finishes, you have to tell the engine
the decision of the player.
This value to return can be \c true to buy the treasure,
or anything else to refuse and do nothing.
Use the \c status parameter of
\ref lua_api_game_stop_dialog "game:stop_dialog(status)" to indicate it.

\remark Recall that when the
  \ref lua_api_game_on_dialog_started "game:on_dialog_started()"
  event is not defined, the engine uses by default a built-in dialog box with
  minimal features.
  This built-in dialog box works correctly with shop items, providing that
  the text of the \c "_shop.question" dialog has the expected format.
  It should have three lines. The \c "$v" sequence (if any)
  is subsituted by the actual price like suggested above,
  and the user can select one of the last two lines:
  the first one is yes and the second one is no.

\section lua_api_shop_treasure_inherited_methods Methods inherited from map entity

Shop treasures are particular \ref lua_api_entity "map entities".
Therefore, they inherit all methods from the type map entity.

See \ref lua_api_entity_methods to know these methods.

\section lua_api_shop_treasure_methods Methods of the type shop treasure

None.

\section lua_api_shop_treasure_inherited_events Events inherited from map entity

Events are callback methods automatically called by the engine if you define
them.

Shop treasures are particular \ref lua_api_entity "map entities".
Therefore, they inherit all events from the type map entity.

See \ref lua_api_entity_events to know these events.

\section lua_api_shop_treasure_events Events of the type shop treasure

The following events are specific to shop treasures.

\subsection lua_api_shop_treasure_on_buying shop_treasure:on_buying()

Called when the player is about to buy this treasure.

He already accepted to buy it and validated the dialog.
At this point, you may cancel the deal for some reason by returning \c false
(for example if you realize that the player has no bottle and therefore
cannot buy the potion he wanted).
- Return value (boolean): \c true if the player is allowed to buy the treasure.

\subsection lua_api_shop_treasure_on_bought shop_treasure:on_bought()

Called when the player has just bought this treasure.
- Return value (boolean): \c true if the player is allowed to buy the treasure.

\remark This event is called right after the more general events
  \ref lua_api_item_on_obtaining "item:on_obtaining()"
  and
  \ref lua_api_map_on_obtaining_treasure "map:on_obtaining_treasure()".
  Those two events are called no matter how the treasure is being obtained:
  from a \ref lua_api_chest "chest",
  from a \ref lua_api_pickable "pickable treasure",
  from a shop treasure
  or explicitly with \ref lua_api_hero_start_treasure "hero:start_treasure()".

*/

