/**
\page lua_api_file Files

\tableofcontents

This module provides functions to manually read and write files from the
quest data directory and from quest write directory.

\section lua_api_file_intro Overview

Data files of the quest are located either in a
\c data/ directory or in a \c data.solarus or \c data.solarus.zip archive.
Files that you write are in the
\ref lua_api_main_set_quest_write_dir "write directory" of the quest.

This module encapsulates the transparent search of these files in both locations.
You can access them independently of their actual place.

However, note that all built-in file accesses in Solarus
(loading maps, loading sprites, reading and writing savegames, etc.) already
implement this transparent search.
You will only need this module if you implement your custom data files or if
you have some custom files to save.

In all functions of \c sol.file, the notation for the directory
separator is always \c "/" (slash),
no matter the underlying platform.

You can read and write files in the quest write directory,
and you can only read files in the data directory or archive.
If a file to read exists in both locations, the quest write directory is given
priority.

Examples of use:
- You can implement your own savegame system if
 \ref lua_api_game_intro_save "the built-in one"
 does not fit your needs.
- You can save a file that contain some user settings, and have a default
  version of that file in the data directory.
  Since the quest write directory has the priority, the saved version will
  be used if any.
- You can save dynamic content like maps automatically generated.
  Since data files are also read from the quest write directory, map files
  can be loaded from there.
- You can make an in-game dialog editor for translators.

\section lua_api_file_functions Functions of sol.file

\subsection lua_api_file_open sol.file.open(file_name, [mode])

Same as
<a href="http://www.lua.org/manual/5.1/manual.html#pdf-io.open">io.open()</a>,
but relative to the quest write directory or to the data directory.

If a valid quest write directory is set
(in your
\ref quest_properties_file "quest.dat file" or by
calling \ref lua_api_main_set_quest_write_dir "sol.main.set_quest_write_dir()"),
that directory is tried first.
Then, the \c data directory of your quest is tried if the mode is \c "r"
(read mode).

This function just calls \c io.open() with the actual path and the mode as
parameters, and returns its results.
- \c file_name (string): Name of the file to open, relative to the quest write
  directory or to the data directory.
- \c mode (string, optional): Opening mode (see the Lua documentation of
<a href="http://www.lua.org/manual/5.1/manual.html#pdf-io.open">io.open()</a>
).
- Return value (file or nil+string): The file object created, or \c nil plus
  an error message in case of failure.
  The file value is the standard Lua file object as returned by \c io.open(),
  and you can then use all Lua file functions
  (%file:read(), %file:write(), %file:lines(), %file:close(), etc.).

\subsection lua_api_file_exists sol.file.exists(file_name)

Returns whether the specified file exists
in the quest write directory of in the data directory.

If a valid quest write directory is set
(in your
\ref quest_properties_file "quest.dat file" or by
calling \ref lua_api_main_set_quest_write_dir "sol.main.set_quest_write_dir()"),
that directory is tried first.
Then, the \c data directory of your quest is tried.
- \c file_name (string): Name of the file to test, relative
  to the \ref lua_api_main_get_quest_write_dir "quest write directory"
  or to the data directory.
- Return value (boolean): \c true if there exists a file with this name.

\subsection lua_api_file_remove sol.file.remove(file_name)

Deletes a file or a directory from the quest write directory.

A valid quest write directory must be set (in your
\ref quest_properties_file "quest.dat" file or by
calling \ref lua_api_main_set_quest_write_dir "sol.main.set_quest_write_dir()"),
otherwise this function generates a Lua error.
- \c file_name (string): Name of the file to delete, relative
  to the \ref lua_api_main_get_quest_write_dir "quest write directory".
  If it is a directory, it must be empty before you delete it.
- Return value (boolean and string): \c true in case of success, \c nil plus
  an error message in case of failure.

\subsection lua_api_file_rename sol.file.rename(old_file_name, new_file_name)

Renames a file or a directory in the quest write directory.

A valid quest write directory must be set (in your
\ref quest_properties_file "quest.dat" file or by
calling \ref lua_api_main_set_quest_write_dir "sol.main.set_quest_write_dir()"),
otherwise this function generates a Lua error.
- \c old_file_name (string): Name of the file to rename, relative
  to the \ref lua_api_main_get_quest_write_dir "quest write directory".
- \c new_file_name (string): New name to set, relative
  to the \ref lua_api_main_get_quest_write_dir "quest write directory".
- Return value (boolean and string): \c true in case of success, \c nil plus
  an error message in case of failure.

\subsection lua_api_file_mkdir sol.file.mkdir(dir_name)

Creates a directory in the quest write directory.

A valid quest write directory must be set (in your
\ref quest_properties_file "quest.dat" file or by
calling \ref lua_api_main_set_quest_write_dir "sol.main.set_quest_write_dir()"),
otherwise this function generates a Lua error.
- \c dir_name (string): Name of the directory to delete, relative
  to the \ref lua_api_main_get_quest_write_dir "quest write directory".
- Return value (boolean or nil+string): \c true in case of success, \c nil plus
  an error message in case of failure.

*/

