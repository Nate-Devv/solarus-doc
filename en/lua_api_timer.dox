/**
\page lua_api_timer Timers

\tableofcontents

Timers allow you to call a function in the future with a specified delay.

Here is a first example of use:

\verbatim
-- Play sound "secret" in one second.
local function play_secret_sound()
  sol.audio.play_sound("secret")
end

sol.timer.start(1000, play_secret_sound)
\endverbatim

Shorter version to do the same thing:

\verbatim
-- Equivalent code using an anonymous function.
sol.timer.start(1000, function()
  sol.audio.play_sound("secret")
end)
\endverbatim

You can repeat a timer by returning \c true from your function:

\verbatim
-- Call a function every second.
sol.timer.start(1000, function()
  sol.audio.play_sound("danger")
  return true  -- To call the timer again (with the same delay).
end)
\endverbatim

To make a timer that repeats itself 10 times, just return \c false after
10 calls:

\verbatim
-- Call a function ten times, with one second between each call.
local num_calls = 0
sol.timer.start(1000, function()
  sol.audio.play_sound("danger")
  num_calls = num_calls + 1
  return num_calls < 10
end)
\endverbatim

It is possible to restrict the lifetime of a timer to a context,
like the game, the map or an enemy:

\verbatim
-- Enemy that shoots a fireball every 5 seconds until it is killed.
sol.timer.start(your_enemy, 5000, function()
  sol.audio.play_sound("attack_fireball")
  map:create_enemy(...)  -- Code that creates the fireball.
  return true  -- Repeat the timer.
end)
\endverbatim
Setting the context to an enemy ensures that when the enemy is killed,
the timer is canceled.
Otherwise, the callback function would still be called: in this example,
you would hear the \c "attack_fireball" sound and the fireball would be
created even if the enemy is killed in the meantime.

\section lua_api_timer_functions Functions of sol.timer

\subsection lua_api_timer_start sol.timer.start([context], delay, callback)

Sets a function to be called after a delay.

If the delay is set to zero, the function is called immediately.
- \c context (\ref lua_api_map "map",
  \ref lua_api_game "game",
  \ref lua_api_item "item",
  \ref lua_api_entity "map entity",
  \ref lua_api_menu "menu"
  or
  \ref lua_api_main "sol.main"; optional): Determines the lifetime of
  the timer.
  The context is where the timer belongs.<br>
  If the context gets closed before the timer is finished, then
  the timer is automatically canceled.
  More precisely, the following rules are applied.
  - If you set the context to a \ref lua_api_map "map", the timer is canceled
    when the player goes to another map.<br>
    Example: a button that opens a door for a limited time.
  - If you set the context to a \ref lua_api_game "game"
    or an \ref lua_api_item "item",
    the timer is canceled when the game is closed.
    (Items have the same lifetime as the game they belong to.)
    This is only possible when the game is running.
    Example: hot water that becomes cold after a few minutes,
    and that the player should bring to an %NPC on another map while it's still
    hot.
  - If you set the context to a \ref lua_api_entity "map entity", the timer is
    canceled when the entity is removed from the map.
    In the case of an enemy, the timer is also canceled when the enemy
    is hurt, immobilized or restarts.
    Also note that while the entity is suspended, the timer is temporarily
    paused.
    An entity may be suspended when the
    \ref lua_api_game_is_suspended "game is suspended",
    or when the entity is
    \ref lua_api_entity_set_enabled "disabled".<br>
    Example: a boss who shoots fireballs every 10 seconds.
    Most enemy scripts usually create timers.
  - If you set the context to a \ref lua_api_menu "menu", the timer is
    canceled when the menu is closed.<br>
    Example: in the title screen, show some animations after a few seconds
    without action from the user.
  - If you set the context to the \ref lua_api_main "sol.main" table, the
    timer is canceled when Lua is closed. Thus, it will be a global timer.
    This kind of timer is not often needed.<br>
    Example: dumping some global information periodically while the program is
    running.
  - If you don't specify a context, then a default context is set for you:
    the current \ref lua_api_map "map" during a \ref lua_api_game "game",
    and \ref lua_api_main "sol.main" if no game is running.
- \c delay (number): Delay before calling the function in milliseconds.
- \c callback (function): The function to be called when the timer finishes.
  If this callback function returns \c true, then the timer automatically
  repeats itself with the same delay.
  In this case, if the delay is shorter than the time of a cycle of the main
  loop, the callback may be executed several times in
  the same cycle in order to catch up.
- Return value (timer): The timer created.
  Most of the time, you don't need to store the returned timer.
  Indeed, there is no problem if it gets garbage-collected: the timer persists
  in the engine side until its completion or the end of its context.
  Usually, you will store the return value only if you need to stop the timer
  explicitly later or to call another method on it.

\remark When they are created, \ref lua_api_map "map" timers,
\ref lua_api_entity "map entity" timers and
\ref lua_api_item "item" timers are initially suspended if a dialog is active.
After that, they get automatically suspended and unsuspended when the map is
suspended or unsuspended.
This default behavior is suited for most use cases, but if you want to change
it, you can use
\ref lua_api_timer_set_suspended "timer:set_suspended()" and
\ref lua_api_timer_set_suspended_with_map "timer:set_suspended_with_map()".

\subsection lua_api_timer_stop_all sol.timer.stop_all(context)

Cancels all timers that are currently running in a context.
- \c context (\ref lua_api_map "map",
  \ref lua_api_game "game",
  \ref lua_api_item "item",
  \ref lua_api_entity "map entity",
  \ref lua_api_menu "menu"
  or
  \ref lua_api_main "sol.main"): The context where you
  want to stop timers.

This function is equivalent to calling \ref lua_api_timer_stop on each timer
of the context.
It may allow you to avoid to store explicitly all your timers.

\remark Canceling timers by hand may be tedious and error-prone.
  In lots of cases, you can simply pass a context parameter to
  \ref lua_api_timer_start "sol.timer.start()" in order to restrict the
  lifetime of your timer to some other object.

\section lua_api_timer_methods Methods of the type timer

\subsection lua_api_timer_stop timer:stop()

Cancels this timer.

If the timer was already finished or canceled, nothing happens.

\remark Canceling timers by hand may be tedious and error-prone.
  In lots of cases, you can simply pass a context parameter to
  \ref lua_api_timer_start "sol.timer.start()" in order to restrict the
  lifetime of your timer to some other object.

\subsection lua_api_timer_is_with_sound timer:is_with_sound()

Returns whether a clock sound is played repeatedly during this timer.
- Return value (boolean): \c true if a clock sound is played with this timer.

\subsection lua_api_timer_set_with_sound timer:set_with_sound(with_sound)

Sets whether a clock sound is played repeatedly during this timer.
- \c with_sound (boolean, optional): \c true to play a clock sound
  repeatedly (no value means \c true).

\subsection lua_api_timer_is_suspended timer:is_suspended()

Returns whether this timer is currently suspended.
- Return value (boolean): \c true if this timer is currently suspended.

\subsection lua_api_timer_set_suspended timer:set_suspended([suspended])

Returns whether this timer is currently suspended.
- \c suspended (boolean, optional): \c true to suspend the timer, \c false to
  unsuspend it (no value means \c true).

\subsection lua_api_timer_is_suspended_with_map timer:is_suspended_with_map()

Returns whether this timer gets automatically suspended when the
\ref lua_api_map "map" is
suspended.
- Return value (boolean): \c true if this timer gets suspended when the map
  is suspended.

\subsection lua_api_timer_set_suspended_with_map timer:set_suspended_with_map([suspended_with_map])

Sets whether this timer should automatically be suspended when the
\ref lua_api_map "map" gets
suspended.

The map is suspended by the engine in a few cases, like when the game is
paused, when there is a dialog or when the camera is being moved by a script.
When this happens, all \ref lua_api_entity "map entities" stop moving and most
\ref lua_api_sprite "sprites" stop their animation.
With this setting, you can choose whether your timer gets suspended too.

By default, \ref lua_api_map "map" timers,
and
\ref lua_api_item "item" timers are suspended with the
map.
\ref lua_api_entity "Entity" timers are more complex: an entity
(and its timers) also get suspended when the entity gets
\ref lua_api_entity_set_enabled "disabled". You should not use this function
on entity timers.
- \c suspended_with_map (boolean, optional): \c true to suspend the timer when
  the map is suspended, \c false to continue (no value means \c true).

\remark Even when this setting is set to \c true, you can override its
behavior by calling \ref lua_api_timer_set_suspended "timer:set_suspended()".

\subsection lua_api_timer_get_remaining_time timer:get_remaining_time()

Returns the remaining time of this timer.
- Return value (number): The time remaining in milliseconds.
  \c 0 means that the timer is finished (or will finish in the current cycle)
  or was canceled.

\subsection lua_api_timer_set_remaining_time timer:set_remaining_time(remaining_time)

Changes the remaining time of this timer.

This function has no effect if the timer is already finished.
- \c remaining_time (number): The time remaining in milliseconds.
  \c 0 makes the timer finish now and immediately executes its callback.

\remark When a timer is repeated (that is, if its callback returns \c true),
  the timer gets rescheduled with its initial delay again, no matter if you
  called this function in the meantime.

*/

