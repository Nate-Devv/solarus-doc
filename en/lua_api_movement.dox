/**
\page lua_api_movement Movements

\tableofcontents

If you need to move an \ref lua_api_enemy "enemy" of the map,
a \ref lua_api_sprite "sprite" in a menu
or simply an arbitrary point, you can create a
movement object and set its properties.
There are several types of movements. They differ by the kind of trajectory
they can make.
When you create a movement, you obtain a value of the movement type you chose.
Then, to get and set its properties (like the speed, the angle, etc.),
a movement object has several methods available.
As detailed below, the methods available differ depending on the movement type
because all movement types don't have the same properties.

The following movement types are available.
- \subpage lua_api_straight_movement "Straight movement":
  Rectilinear trajectory in any direction.
- \subpage lua_api_random_movement "Random movement":
  A straight movement whose direction changes randomly from time to time.
- \subpage lua_api_target_movement "Target movement":
  Straight trajectory towards a possibly moving target.
- \subpage lua_api_path_movement "Path movement":
  Predetermined path composed of steps in the 8 main directions.
- \subpage lua_api_random_path_movement "Random path movement":
  Like a path movement, but with random steps.
- \subpage lua_api_path_finding_movement "Path finding movement":
  Like a path movement, but calculated to reach a possibly moving target.
- \subpage lua_api_circle_movement "Circle movement":
  Circular trajectory around a possibly moving center.
- \subpage lua_api_jump_movement "Jump movement":
  An illusion of jump above a baseline.
- \subpage lua_api_pixel_movement "Pixel movement":
  A trajectory described pixel by pixel.

This page desribes the methods and callbacks common to all movement types.

Movements can be applied in-game to \ref lua_api_entity "map entities",
but also
outside a game, typically in a \ref lua_api_menu "menu"
to move a \ref lua_api_sprite "sprite", an \ref lua_api_surface "image"
or just an <tt>(x,y)</tt> value.
However, some properties of movements (like \ref
lua_api_movement_set_ignore_obstacles "movement:set_ignore_obstacles()")
only take effect in the case of a \ref lua_api_entity
"map entity"
because they refer to \ref lua_api_map "map-specific" notions like obstacles.

\section lua_api_movement_functions Functions of sol.movement

\subsection lua_api_movement_create sol.movement.create(movement_type)

Creates a movement.

Depending on the movement type, several methods are
then available to get and set its properties.
- \c movement_type (string): Type of movement to create. Must be one of:
  - \c "straight": Follows a rectilinear trajectory.
  - \c "random": Like "straight" but with random, changing angles.
  - \c "target": Like "straight" but goes into the direction of a
    fixed point or a moving entity.
  - \c "path": Follows a specified succession of basic moves on an
    8x8 pixels grid.
  - \c "random_path": Like "path" but computes the path randomly.
  - \c "path_finding": Like "path" but computes the shortest path to
   an entity, avoiding obstacles of the map (only possible in game).
  - \c "circle": Follows a circular trajectory around a center.
  - \c "jump": Makes a jump above a rectilinear trajectory.
  - \c "pixel": Follows a trajectory specified pixel by pixel.
- Return value (movement): The movement created. See the sections below to
  know the get and set methods available for your movement type.


\section lua_api_movement_methods Methods of all movement types

These methods exist in all movement types.

\subsection lua_api_movement_start movement:start(object_to_move, [callback])

Starts this movement on an object.

The movement will be applied until it finishes (if it has an end)
or until it is replaced by another one.
It does not matter if the movement gets out of scope in your Lua script.
- \c object_to_move (\ref lua_api_entity "map entity",
  \ref lua_api_drawable "drawable object" or table):
  The object to move. It may be a map entity, a drawable object
  or a table with two fields \c x and \c y.
  In the case of the table, if the fields \c x and \c y don't exist, they are
  created and initialized to \c 0.

  An empty table will be initialized with <tt>{x = 0, y = 0}</tt>.
- \c callback (function, optional): A function to call when the movement
  finishes.

\remark The \ref lua_api_hero "hero" is a
  \ref lua_api_entity "map entity" just like any other. So you can apply
  a custom movement to him using this function.
  The usual way to do this is to call \ref lua_api_hero_freeze "hero:freeze()"
  first to properly remove control from the player, and then to start the
  movement. When you have finished, you can restore the control
  with \ref lua_api_hero_unfreeze "hero:unfreeze()".
  Indeed, changing the movement while the hero is in a state other than
  \c "frozen" might give surprising results.
  Your movement will be applied, replacing any built-in movement of the state,
  but whatever was happening in the state will still continue.
  Furthermore, your movement will disappear as soon as the state changes.
  So don't start a movement on the hero during an arbitrary state
  unless you know what you are doing.

\subsection lua_api_movement_stop movement:stop()

Stops this movement and detaches it from the object that was moved.

\subsection lua_api_movement_get_xy movement:get_xy()

Returns the coordinates of the object controlled by this movement.

The object controlled by this movement may be a
\ref lua_api_entity "map entity", a
\ref lua_api_drawable "drawable object" or a point.
- Return value 1 (number): X coordinate.
- Return value 2 (number): Y coordinate.

\subsection lua_api_movement_set_xy movement:set_xy(x, y)

Sets the coordinates of the object controlled by this movement.

The object controlled by this movement may be a
\ref lua_api_entity "map entity", a
\ref lua_api_drawable "drawable object" or a point.
- \c x (number): X coordinate to set.
- \c y (number): Y coordinate to set.

\subsection lua_api_movement_get_ignore_obstacles movement:get_ignore_obstacles()

Returns whether this movement ignores obstacles of the map.

If the movement is not attached to a \ref lua_api_entity "map entity"
yet, it is not an error to
call this function: the result will have an effect when the movement gets
attached to a map entity.
- Return value (boolean): \c true if this movement ignores obstacles.

\subsection lua_api_movement_set_ignore_obstacles movement:set_ignore_obstacles([ignore_obstacles])

Sets whether a map entity controlled by this movement should ignore obstacles of
the map.

If the movement is not attached to a \ref lua_api_entity "map entity" yet,
it is not an error to
call this function: your choice will have an effect when the movement gets
attached to a map entity.
- \c ignore_obstacles (boolean, optional): \c true to make this movement ignore
  obstacles of the map (no value means \c true).

\subsection lua_api_movement_get_direction4 movement:get_direction4()

From the four main directions, returns the closest one to the current
trajectory.

East is 0, North is 1, West is 2, South is 3.
As the real trajectory does not necessarily follows one of the four main
directions, it will be converted to the closest one.

If you use this movement to control a \ref lua_api_sprite "sprite"
(or a \ref lua_api_entity "map entity" that has a sprite),
you can use this function to make the sprite face the direction of the
movement.
- Return value (number): The closest direction corresponding to the
  angle of this movement.

Example of use:
\verbatim
-- Example of code from an enemy script.

-- This function is called when the enemy should start or restart its movement.
function enemy:on_restarted()

  -- Create a movement that makes random straight trajectories.
  local movement = sol.movement.create("random")

  -- This function is called when the trajectory has changed.
  function movement:on_movement_changed()
    -- The angle of the movement has changed: update the sprite accordingly.
    local direction = movement:get_direction4()
    enemy:get_sprite():set_direction(direction)
  end

  movement:start(enemy)
end
\endverbatim

\section lua_api_movement_events Events of all movement types

Events are callback methods automatically called by the engine if you define
them.

The following events are common to all movement types.

\remark All movement events are here (it turns out that no specific movement
  type define additional events).

\subsection lua_api_movement_on_position_changed movement:on_position_changed()

Called when the coordinates controlled by this movement have just changed.

\subsection lua_api_movement_on_obstacle_reached movement:on_obstacle_reached()

During a \ref lua_api_game "game",
called when the coordinates controlled by this movement have just failed to
change because they would lead the \ref lua_api_entity "map entity"
controlled into an obstacle of the \ref lua_api_map "map".

When an obstacle is reached, this event is called instead of
\ref lua_api_movement_on_position_changed "movement:on_position_changed()".

This event can only be called when all of these conditions are met:
- A \ref lua_api_game "game" is currently running.
- The movement is attached to a \ref lua_api_entity "map entity" (like an
  \ref lua_api_enemy "enemy", an \ref lua_api_npc "NPC", etc.).
- The movement does not ignore obstacles (i.e.
  \ref lua_api_movement_get_ignore_obstacles
  "movement:get_ignore_obstacles()" returns
  \c false).

\remark When the movement attempts to change the coordinates, one of
  \ref lua_api_movement_on_position_changed "movement:on_position_changed()"
  or \ref lua_api_movement_on_obstacle_reached "movement:on_obstacle_reached()"
  is guaranteed to be called.

\subsection lua_api_movement_on_changed movement:on_changed()

Called when the characteristics of this movement (like speed or angle) have
just changed.

\subsection lua_api_movement_on_finished movement:on_finished()

Called when this movement has just finished (if there is an end).

*/

