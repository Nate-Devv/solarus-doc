/**
\page lua_api_camera Camera

\tableofcontents

The camera is a rectangular shape that determines the visible part of the
\ref lua_api_map "map".
There is always exactly one camera on the current map.
The camera is automatically created by the engine when loading a map.
You cannot create or remove it.
To access the camera of the map from one of your scripts, you can use
\ref lua_api_map_get_camera "map:get_camera()".

\section lua_api_camera_overview Overview

The camera can work in two states.
It can be either centered on an
\ref lua_api_entity "entity" and track it automatically,
or it can be controlled manually by your scripts or by the engine.

When a map starts, its camera tracks the \ref lua_api_hero "hero".

Use \ref lua_api_camera_start_manual "camera:start_manual"
to switch to manual state, and
\ref lua_api_camera_start_tracking "camera:start_tracking"
to switch to tracking state.
Starting a
\ref lua_api_movement "movement" on the camera 
also switches it to manual state.

\subsection lua_api_camera_constraints Movements and constraints

\ref lua_api_separator "Separators" and map limits are obstacles for the
camera.

It means that if the camera is close to a separator or to a limit of the map,
its movement stops as you would expect, independently of its state.

Remember however that obstacles can be explicitly ignored with
\ref lua_api_movement_set_ignore_obstacles
"movement:set_ignore_obstacles(true)".
For a camera, it means that you can ignore separators and even map limits
if you want.

\subsection lua_api_camera_tracking_state Tracking state specifics

In tracking state, when the tracked entity crosses a separator,
the engine automatically starts a scrolling movement on the camera.
After the scrolling, the camera is centered on the tracked entity again.

\subsection lua_api_camera_manual_state Manual state specifics

In manual state, the map is by default automatically suspended.
This is useful to make cutscenes.
See
\ref lua_api_camera_set_auto_suspend_map "camera:set_auto_suspend_map()"
if you want to change this behavior.

\subsection lua_api_camera_overview_size Camera size

By default, the size of the camera is the
\ref lua_api_video_get_quest_size "quest size",
meaning that the camera occupies the whole screen.

It is possible to set a smaller size to the camera, in order to show the
map only on a subpart of the screen.
You can then use the rest of the screen to display some information like a HUD.
Use
\ref lua_api_camera_set_size "camera:set_size()"
and \ref lua_api_camera_set_origin "camera:set_origin()"
to indicate the exact subpart of the screen where you want
the camera to be displayed.

\section lua_api_camera_inherited_methods Methods inherited from map entity

A camera is a particular \ref lua_api_entity "map entity".
Therefore, it inherits all methods from the type map entity.

See \ref lua_api_entity_methods to know these methods.

\section lua_api_camera_methods Methods of the type camera

TODO

camera:set_size(width, height)

camera:set_origin(x, y)

camera:start_tracking(entity)

camera:start_manual()

camera:get_auto_suspend_map()

camera:set_auto_suspend_map([suspend])

\section lua_api_camera_inherited_events Events inherited from map entity

Events are callback methods automatically called by the engine if you define
them.

A camera is a particular \ref lua_api_entity "map entity".
Therefore, it inherits all events from the type map entity.

See \ref lua_api_entity_events to know these events.

\section lua_api_camera_events Events of the type camera

None.

*/

