/**
\page lua_api_switch Switch

\tableofcontents

A switch is a button that can be activated to trigger a mechanism.

This type of \ref lua_api_entity "map entity" can be declared in the
\ref lua_api_map_overview_files "map data file".
It can also be created dynamically with
\ref lua_api_map_create_switch "map:create_switch()".

\section lua_api_switch_overview Overview

A switch may be activated by the
\ref lua_api_hero "hero",
by a \ref lua_api_block "block"
or by a projectile,
depending on its subtype.
The following subtypes of switches are available:
- Walkable, traversable pressure plate.
- Button to be activated by shooting an
  \ref lua_api_arrow "arrow" on it with the
  \ref lua_api_hero_start_bow "bow".
- Solid switch to be activated with the sword or other weapons.

When a switch is activated, the event
\ref lua_api_switch_on_activated "switch:on_activated()"
is called.
Define that event to implement what happens:
\ref lua_api_map_open_doors "opening a door",
\ref lua_api_entity_set_enabled "showing a chest", etc.

Some switches get inactivated when the hero
(or the entity that activated them) leaves them.
In this case, when the switch is inactivated, the event
\ref lua_api_switch_on_inactivated "switch:on_inactivated()"
is called.

The size of a switch is always 16x16 pixels.
Its \ref lua_api_sprite "sprite" can be defined at creation time,
as well as the sound played when it gets activated.

\section lua_api_switch_inherited_methods Methods inherited from map entity

Switches are particular \ref lua_api_entity "map entities".
Therefore, they inherit all methods from the type map entity.

See \ref lua_api_entity_methods to know these methods.

\section lua_api_switch_methods Methods of the type switch

The following methods are specific to switches.

\subsection lua_api_switch_get_sprite switch:get_sprite()

Returns the sprite of this switch.
- Return value (\ref lua_api_sprite "sprite"): The sprite of this switch,
  or \c nil if the switch has no sprite.

\subsection lua_api_switch_is_activated switch:is_activated()

Returns whether this switch is activated.
- Return value (boolean): \c true if this switch is currently activated.

\subsection lua_api_switch_set_activated switch:set_activated([activated])

Sets whether this switch is activated or not.

The change is quiet and immediate: no sound is played and no event
is triggered.
- \c activated (boolean, optional): \c true to make the switch activated,
  \c false to make is inactivated. No value means \c true.

\subsection lua_api_switch_set_locked switch:set_locked([locked]) 

Locks this switch in its current state or unlocks it.

When a switch is locked, its state cannot change anymore:
it can no longer be activated or inactivated
- \c locked (boolean, optional): \c true to lock the switch, \c false to
  unlock it. No value means \c true.

\remark The method \ref lua_api_switch_set_activated "switch:set_activated()"
  works even on a locked switch.

\section lua_api_switch_inherited_events Events inherited from map entity

Events are callback methods automatically called by the engine if you define
them.

Switches are particular \ref lua_api_entity "map entities".
Therefore, they inherit all events from the type map entity.

See \ref lua_api_entity_events to know these events.

\section lua_api_switch_events Events of the type switch

The following events are specific to switches.

\subsection lua_api_switch_on_activated switch:on_activated()

Called when this switch has just been turned on.

This is the right place to define the action that you want your switch to
perform.

\subsection lua_api_switch_on_inactivated switch:on_inactivated()

Called when a switch has just been turned off.

\subsection lua_api_switch_on_left switch:on_left()

Called when an entity placed on a switch
(like the \ref lua_api_hero "hero" or a
\ref lua_api_block "block")
has just left the switch, regardless of whether the switch was activated or not.

*/

